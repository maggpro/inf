import { Telegraf, Context } from 'telegraf';
import { Message, Update } from 'telegraf/types';
import { Database } from './database';
import { PaymentsHandler } from './payments';

interface WebAppData {
    command: string;
    stars: number;
    type: string;
}

interface WebAppContext extends Context {
    webAppData: {
        data: {
            json<T>(): T;
            text(): string;
        };
        button_text: string;
    };
}

// –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
interface PaymentForm {
    form_id: string;
    bot_id: number;
    title: string;
    description: string;
    invoice: {
        currency: string;
        amount: number;
        native_currency: string;
        native_amount: number;
    };
    provider_id: number;
    url: string;
}

// –î–æ–±–∞–≤–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è Stars
interface StarsInvoice {
    title: string;
    description: string;
    amount: number;
    currency: string;
}

interface StarsForm {
    form_id: string;
    bot_id?: number;
    title: string;
    description: string;
    invoice: {
        currency: string;
        amount: number;
    }
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ Stars
interface StarsTransaction {
    amount: number;
    currency: string;
    message: string;
}

interface WebAppStarsRequest {
    method: 'sendStarsForm';
    form_id: string;
    invoice: StarsInvoice;
}

interface StarsPaymentRequest {
    method: 'createStarsPayment';
    params: {
        title: string;
        description: string;
        photo_url: string | null;
        payload: string;
        amount: number;
        currency: string;
    }
}

export class Bot {
    private payments: PaymentsHandler;

    constructor(private bot: Telegraf, private db: Database) {
        this.payments = new PaymentsHandler(bot, db);
        this.setupHandlers();
    }

    private setupHandlers() {
        this.bot.command('start', this.handleStart.bind(this));
        this.bot.command('balance', this.handleBalance.bind(this));
        this.bot.command('referral', this.handleReferral.bind(this));

        this.bot.on('pre_checkout_query', (ctx) => ctx.answerPreCheckoutQuery(true));
        this.bot.on('successful_payment', this.handleSuccessfulPayment.bind(this));

        this.bot.command('send_stars', async (ctx) => {
            try {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Stars
                await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 1 Star:', {
                    reply_markup: {
                        inline_keyboard: [[{
                            text: 'üí´ –û—Ç–ø—Ä–∞–≤–∏—Ç—å 1 Star',
                            url: 'tg://stars/send?amount=1'
                        }]]
                    }
                });
            } catch (error) {
                console.error('Error sending stars command:', error);
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        });

        this.bot.on('message', async (ctx: any) => {
            try {
                const message = ctx.message;

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                if (message?.web_app_data?.data) {
                    const data = JSON.parse(message.web_app_data.data);

                    if (data.method === 'stars_payment') {
                        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Stars API
                        await ctx.telegram.sendMessage(ctx.from.id, '–û–ø–ª–∞—Ç–∞ Stars...', {
                            reply_markup: {
                                inline_keyboard: [[{
                                    text: `–û—Ç–ø—Ä–∞–≤–∏—Ç—å ${data.amount} Star`,
                                    pay: true
                                }]]
                            }
                        });
                    }
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É Stars
                if (message.successful_payment) {
                    const userId = ctx.from.id;
                    await this.db.updateUserPaid(userId, true);
                    await this.db.addInfToUser(userId, 1);

                    await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ Star! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω 1 INF.');

                    await ctx.reply('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å:', {
                        reply_markup: {
                            inline_keyboard: [[
                                {
                                    text: 'üéÆ –ò–≥—Ä–∞—Ç—å',
                                    web_app: {
                                        url: `https://maggpro.github.io/inf/?v=${Date.now()}`
                                    }
                                }
                            ]]
                        }
                    });
                }
            } catch (error) {
                console.error('Error handling stars payment:', error);
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
        this.bot.action('pay_stars', async (ctx) => {
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º answerCbQuery –≤–º–µ—Å—Ç–æ answerCallbackQuery
                await ctx.answerCbQuery();

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Stars
                await ctx.reply('–î–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Star:', {
                    reply_markup: {
                        inline_keyboard: [[{
                            text: 'üí´ –û—Ç–ø—Ä–∞–≤–∏—Ç—å 1 Star',
                            url: `tg://stars/send?amount=1&message=${encodeURIComponent('–û–ø–ª–∞—Ç–∞ –∑–∞ –≤—Ö–æ–¥ –≤ INF Game')}`
                        }]]
                    }
                });

                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
                await ctx.reply('–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ Star, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @donate –≤ —ç—Ç–æ—Ç —á–∞—Ç');

            } catch (error) {
                console.error('Error processing payment:', error);
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        });
    }

    private async handleStart(ctx: any) {
        try {
            const userId = ctx.from.id;
            const username = ctx.from.username;
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} (${userId}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);

            let user = await this.db.getUserStats(userId);
            if (!user) {
                console.log(`–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}`);
                user = await this.db.createUser(userId, username);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Star
                await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ INF Game! –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 1 Star.', {
                    reply_markup: {
                        inline_keyboard: [[
                            {
                                text: 'üí´ –û—Ç–ø—Ä–∞–≤–∏—Ç—å 1 Star',
                                url: `tg://stars/send?amount=1&message=${encodeURIComponent('–û–ø–ª–∞—Ç–∞ –∑–∞ –≤—Ö–æ–¥ –≤ INF Game')}`
                            }
                        ], [
                            {
                                text: 'üéÆ –ò–≥—Ä–∞—Ç—å',
                                web_app: { url: 'https://maggpro.github.io/inf/' }
                            }
                        ]]
                    }
                });
            } else {
                console.log(`–°—É—â–µ—Å–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –≤–µ—Ä–Ω—É–ª—Å—è`);
                await ctx.reply(`–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.inf_balance} INF`, {
                    reply_markup: {
                        inline_keyboard: [[
                            { text: 'üéÆ –ò–≥—Ä–∞—Ç—å', web_app: { url: 'https://maggpro.github.io/inf/' } }
                        ]]
                    }
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ handleStart:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    private async handleBalance(ctx: any) {
        const userId = ctx.from.id;
        const user = await this.db.getUserStats(userId);
        await ctx.reply(`–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.inf_balance} INF`);
    }

    private async handleReferral(ctx: any) {
        const userId = ctx.from.id;
        const user = await this.db.getUserStats(userId);
        await ctx.reply(`–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/your_bot?start=${user.referral_code}`);
    }

    private async handleSuccessfulPayment(ctx: any) {
        try {
            const userId = ctx.from.id;
            const payment = ctx.message.successful_payment;

            if (payment.invoice_payload.startsWith('initial_payment_')) {
                await this.db.updateUserPaid(userId, true);
                await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –¢–µ–ø–µ—Ä—å —ã –º–æ–∂–µ—Ç–µ –Ω–∞–∞—Ç—å –∏–≥—Ä.');
            } else if (payment.invoice_payload.startsWith('stars_purchase_')) {
                const [, , , stars] = payment.invoice_payload.split('_');
                await this.db.addInfToUser(userId, Number(stars));
                await ctx.reply(`–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${stars} INF.`);
            }
        } catch (error) {
            console.error('Error handling successful payment:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
        }
    }

    private async handlePayment(ctx: any) {
        try {
            const userId = ctx.from.id;
            const payment = ctx.message.successful_payment;

            if (payment.currency === 'XTR') { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –æ–ø–ª–∞—Ç–∞ Stars
                if (payment.payload === 'initial_payment') {
                    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await this.db.updateUserPaid(userId, true);
                    await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.');
                }
            }
        } catch (error) {
            console.error('Error handling payment:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
        }
    }
}