import { Telegraf } from 'telegraf';
import { Database } from './database';
import { StarPackage } from './types';

export class PaymentsHandler {
    constructor(private bot: Telegraf, private db: Database) {}

    async handleInitialPayment(userId: number) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ Stars
            const message = `
üåü –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 1 Star

–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Star:
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É Star –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1 Star
3. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
            `;

            await this.bot.telegram.sendMessage(userId, message, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [[
                        { text: '‚≠êÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å 1 Star', callback_data: 'send_initial_star' }
                    ]]
                }
            });
        } catch (error) {
            console.error('Error creating initial payment:', error);
            throw error;
        }
    }

    async handleStarsPurchase(userId: number, starsPack: StarPackage) {
        try {
            const message = `
üåü –ü–æ–∫—É–ø–∫–∞ ${starsPack.inf} INF –∑–∞ ${starsPack.stars} Stars

–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Stars:
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É Star –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${starsPack.stars} Stars
3. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
            `;

            await this.bot.telegram.sendMessage(userId, message, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [[
                        { text: `‚≠êÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å ${starsPack.stars} Stars`, callback_data: `send_stars_${starsPack.stars}` }
                    ]]
                }
            });
        } catch (error) {
            console.error('Error creating stars payment:', error);
            throw error;
        }
    }
}